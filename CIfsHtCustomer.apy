222-----------------------------------------------------------------------------
--
--  Logical unit: CIfsHtCustomer
--
--  Purpose:
--
--  IFS/Design Template Version 2.5
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

DEFINE MODULE        = ORDER1111
DEFINE LU            = CIfsHtCustomer
DEFINE TABLE         = C_IFS_HT_CUSTOMER_TAB
DEFINE VIEW          = C_IFS_HT_CUSTOMER
DEFINE VIEW1         = C_IFS_HT_CUST_LOV
DEFINE PKG           = C_IFS_HT_CUSTOMER_API

DEFINE OBJID         = rowid
DEFINE OBJVERSION    = "ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))"

-----------------------------------------------------------------------------
-------------------- VIEWS FOR SELECTS --------------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &VIEW view

CREATE OR REPLACE VIEW &VIEW AS
SELECT sequ_id					                 sequ_id,
       company                                                   company,
       custid					                 custid,
       code                                                      code,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'CUSTNAME')  custname,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'BREVITY_CODE')  brevity_code,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'TAX_NUMNER')  tax_numner,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'ADDRESS_PHONE')  address_phone,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'BANK_ACCOUNT')  bank_account,
       modify_user				      modify_user,	 	   
       TO_DATE(TO_CHAR(modify_time, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')						  modify_time,							
       modify_flg					           modify_flg,							
       remark1						          remark1,							
       remark2						          remark2,							
       remark3						         remark3,							
       &OBJID                         objid,
       &OBJVERSION                    objversion
FROM    c_ifs_ht_customer_tab
WITH   read only;

COMMENT ON TABLE &VIEW
   IS 'LU=&LU^PROMPT=C Ifs Ht Customer^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW..sequ_id
   IS 'FLAGS=AMI-L^DATATYPE=NUMBER^PROMPT=Sequ Id^';
COMMENT ON COLUMN &VIEW..company
   IS 'FLAGS=KMI-L^DATATYPE=STRING(5)^PROMPT=Company^';
COMMENT ON COLUMN &VIEW..custid
   IS 'FLAGS=KMI-L^DATATYPE=STRING(20)^PROMPT=Custid^';
COMMENT ON COLUMN &VIEW..code
   IS 'FLAGS=KMI-L^DATATYPE=STRING(16)^PROMPT=code^';
COMMENT ON COLUMN &VIEW..modify_user
   IS 'FLAGS=A-IUL^DATATYPE=STRING(30)^PROMPT=Modify User^';
COMMENT ON COLUMN &VIEW..modify_time
   IS 'FLAGS=A-I-L^DATATYPE=DATE/DATE^PROMPT=Modify Time^';
COMMENT ON COLUMN &VIEW..modify_flg
   IS 'FLAGS=A-IUL^DATATYPE=STRING(1)^PROMPT=Modify Flg^';
COMMENT ON COLUMN &VIEW..remark1
   IS 'FLAGS=A-IUL^DATATYPE=STRING(200)^PROMPT=Remark1^';
COMMENT ON COLUMN &VIEW..remark2
   IS 'FLAGS=A-IUL^DATATYPE=STRING(200)^PROMPT=Remark2^';
COMMENT ON COLUMN &VIEW..remark3
   IS 'FLAGS=A-IUL^DATATYPE=STRING(200)^PROMPT=Remark3^';

PROMPT Creating &VIEW1 view

CREATE OR REPLACE VIEW &VIEW1 AS
SELECT sequ_id					                 sequ_id,
       company                                                   company,
       custid					                 custid,
       code                                                      code,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'CUSTNAME')  custname,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'BREVITY_CODE')  brevity_code,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'TAX_NUMNER')  tax_numner,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'ADDRESS_PHONE')  address_phone,
       C_IFS_HT_CUSTOMER_API.Get_Detail_Data(company,custid,'BANK_ACCOUNT')  bank_account
FROM    c_ifs_ht_customer_tab
WITH   read only;

COMMENT ON TABLE &VIEW1
   IS 'LU=&LU^PROMPT=C Ifs Ht Customer^MODULE=&MODULE^';
COMMENT ON COLUMN &VIEW1..company
   IS 'FLAGS=KMI-L^DATATYPE=STRING(5)^PROMPT=Company^';
COMMENT ON COLUMN &VIEW1..custid
   IS 'FLAGS=KMI-L^DATATYPE=STRING(20)^PROMPT=Custid^';
COMMENT ON COLUMN &VIEW1..code
   IS 'FLAGS=KMI-L^DATATYPE=STRING(16)^PROMPT=code^';
COMMENT ON COLUMN &VIEW1..custname
   IS 'FLAGS=A-IUL^DATATYPE=STRING(100)^PROMPT=custname';
COMMENT ON COLUMN &VIEW1..brevity_code
   IS 'FLAGS=A-IUL^DATATYPE=STRING(6)^PROMPT=brevity_code';
COMMENT ON COLUMN &VIEW1..tax_numner
   IS 'FLAGS=A-IUL^DATATYPE=STRING(20)^PROMPT=tax_numner';
COMMENT ON COLUMN &VIEW1..address_phone
   IS 'FLAGS=A-IUL^DATATYPE=STRING(200)^PROMPT=address_phone';
COMMENT ON COLUMN &VIEW1..bank_account
   IS 'FLAGS=A-IUL^DATATYPE=STRING(200)^PROMPT=bank_account';

 


-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Lock_By_Id___
--    Client-support to lock a specific instance of the logical unit.
--
-- Lock_By_Keys___
--    Server support to lock a specific instance of the logical unit.
--
-- Get_Object_By_Id___
--    Get LU-record from the database with a specified object identity.
--
-- Get_Object_By_Keys___
--    Get LU-record from the database with specified key columns.
--
-- Check_Exist____
--    Check if a specific LU-instance already exist in the database.
--
-- Get_Id_Version_By_Keys___
--    Get the current OBJID and OBJVERSION for a specific LU-instance.
-----------------------------------------------------------------------------

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_changed EXCEPTION;
   row_deleted EXCEPTION;
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        &TABLE%ROWTYPE;
   dummy_      NUMBER;
   CURSOR lock_control IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_
      AND    &OBJVERSION = objversion_
      FOR UPDATE NOWAIT;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   END IF;
   CLOSE lock_control;
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RAISE row_changed;
   ELSE
      CLOSE exist_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Record_Locked(lu_name_);
   WHEN row_changed THEN
      Error_SYS.Record_Modified(lu_name_);
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   company_ IN VARCHAR2,
   code_    IN VARCHAR2) RETURN &TABLE%ROWTYPE
IS
   row_deleted EXCEPTION;
   rec_        &TABLE%ROWTYPE;
   CURSOR lock_control IS
      SELECT *
      FROM   &TABLE
      WHERE  company = company_  AND
			 code = code_
      FOR UPDATE;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   ELSE
      CLOSE lock_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Keys___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   IF (getrec%NOTFOUND) THEN
      CLOSE getrec;
      Error_SYS.Record_Removed(lu_name_);
   END IF;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Id___;


FUNCTION Get_Object_By_Keys___ (
   sequ_id_  IN NUMBER,
   company_ IN VARCHAR2,
   custid_    IN VARCHAR2) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM   &TABLE
      WHERE  sequ_id = sequ_id_ 
		AND	 company = company_  
		AND	 custid = custid_ ;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Keys___;


FUNCTION Check_Exist____ (
   sequ_id_  IN NUMBER,
   company_ IN VARCHAR2,
   custid_    IN VARCHAR2) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE  sequ_id = sequ_id_ 
		AND	 company = company_  
		AND	 custid = custid_ ;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   RETURN(FALSE);
END Check_Exist____;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   sequ_id_    IN NUMBER,
   company_    IN VARCHAR2,
   custid_     IN VARCHAR2)
IS
   CURSOR get_version IS
      SELECT &OBJID, &OBJVERSION
      FROM   &TABLE
      WHERE  sequ_id = sequ_id_ 
		AND	 company = company_  
		AND	 custid = custid_;
BEGIN
   OPEN get_version;
   FETCH get_version INTO objid_, objversion_;
   CLOSE get_version;
END Get_Id_Version_By_Keys___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR INSERT -----------------
-----------------------------------------------------------------------------
-- Prepare_Insert___
--    Set all default values for a new instance (ON-NEW-RECORD) of this
--    logical unit by calling procedure Add_Attr.
--
-- Unpack_Check_Insert___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before creation of the new object.
--
-- Insert___
--    Insert a new LU-instance into the database and return the values
--    for OBJID and OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT VARCHAR2 )
IS
   seq_no_  NUMBER;
BEGIN
   Client_SYS.Clear_Attr(attr_);
--CHS 180921 S-2018-066-CKC WU MODIFY START
   SELECT C_IFS_HT_CUST_SEQ.nextval INTO seq_no_ FROM DUAL;
   Client_SYS.Add_To_Attr('SEQU_ID',seq_no_ , attr_);
   Client_SYS.Add_To_Attr('MODIFY_USER',USER , attr_);
   Client_SYS.Add_To_Attr('MODIFY_TIME',SYSDATE , attr_);
--CHS 180921 S-2018-066-CKC WU MODIFY END
END Prepare_Insert___;


PROCEDURE Unpack_Check_Insert___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(4000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'SEQU_ID') THEN
         newrec_.sequ_id := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'COMPANY') THEN
         newrec_.company := value_;
	  ELSIF (name_ = 'CUSTID') THEN
         newrec_.custid := value_;
      ELSIF (name_ = 'CODE') THEN
         newrec_.code := value_;
      ELSIF (name_ = 'MODIFY_USER') THEN
         newrec_.modify_user := value_;
      ELSIF (name_ = 'MODIFY_TIME') THEN
         newrec_.modify_time := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'MODIFY_FLG') THEN
         newrec_.modify_flg := value_;
      ELSIF (name_ = 'REMARK1') THEN
         newrec_.remark1 := value_;
      ELSIF (name_ = 'REMARK2') THEN
         newrec_.remark2 := value_;
      ELSIF (name_ = 'REMARK3') THEN
         newrec_.remark3 := value_;
      ELSIF (name_ = 'CUSTNAME') THEN
         NULL;
      ELSIF (name_ = 'BREVITY_CODE') THEN
         NULL;
      ELSIF (name_ = 'TAX_NUMNER') THEN
         NULL;
      ELSIF (name_ = 'ADDRESS_PHONE') THEN
         NULL;
      ELSIF (name_ = 'BANK_ACCOUNT') THEN
          NULL;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'SEQU_ID', newrec_.sequ_id);
   Error_SYS.Check_Not_Null(lu_name_, 'COMPANY', newrec_.company);
   Error_SYS.Check_Not_Null(lu_name_, 'CUSTID', newrec_.custid);
   Error_SYS.Check_Not_Null(lu_name_, 'CODE', newrec_.code);
    
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2 )
IS
BEGIN
   newrec_.rowversion := sysdate;
   INSERT
      INTO c_ifs_ht_customer_tab (
                 sequ_id,
	         company,
		 custid,
		 code, 							
		 modify_user,							
		 modify_time,							
		 modify_flg,							
		 remark1,							
		 remark2,							
		 remark3,	
         rowversion)
      VALUES (
         newrec_.sequ_id,
         newrec_.company,
	 newrec_.custid,
         newrec_.code,
         newrec_.modify_user,
         newrec_.modify_time,
         newrec_.modify_flg,
         newrec_.remark1,
         newrec_.remark2,
         newrec_.remark3,
         newrec_.rowversion)
      RETURNING &OBJID INTO objid_;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Insert___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR UPDATE -----------------
-----------------------------------------------------------------------------
-- Unpack_Check_Update___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before modifying the object.
--
-- Update___
--    Update an existing LU-instance in the database and return the
--    the new OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Unpack_Check_Update___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   objid_  IN     VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(4000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'SEQU_ID') THEN
         newrec_.sequ_id := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'COMPANY') THEN
         newrec_.company := value_;
	  ELSIF (name_ = 'CUSTID') THEN
         newrec_.custid := value_;
      ELSIF (name_ = 'CODE') THEN
         newrec_.code := value_;
      ELSIF (name_ = 'MODIFY_USER') THEN
         newrec_.modify_user := Fnd_Session_API.Get_Fnd_User();
      ELSIF (name_ = 'MODIFY_TIME') THEN
         newrec_.modify_time := SYSDATE;
      ELSIF (name_ = 'MODIFY_FLG') THEN
         newrec_.modify_flg := '1';
      ELSIF (name_ = 'REMARK1') THEN
         newrec_.remark1 := value_;
      ELSIF (name_ = 'REMARK2') THEN
         newrec_.remark2 := value_;
      ELSIF (name_ = 'REMARK3') THEN
         newrec_.remark3 := value_;
      ELSIF (name_ = 'CUSTNAME') THEN
         NULL;
      ELSIF (name_ = 'BREVITY_CODE') THEN
         NULL;
      ELSIF (name_ = 'TAX_NUMNER') THEN
         NULL;
      ELSIF (name_ = 'ADDRESS_PHONE') THEN
         NULL;
      ELSIF (name_ = 'BANK_ACCOUNT') THEN
          NULL;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     &TABLE%ROWTYPE,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
BEGIN
   newrec_.rowversion := sysdate;
   IF by_keys_ THEN
      UPDATE c_ifs_ht_customer_tab
         SET sequ_id = newrec_.sequ_id,
			 company = newrec_.company,
		     custid = newrec_.custid,
			 code = newrec_.code,		
			 modify_user = newrec_.modify_user,							
			 modify_time = newrec_.modify_time,							
			 modify_flg = newrec_.modify_flg,							
             remark1 = newrec_.remark1,
             remark2 = newrec_.remark2,
             remark3 = newrec_.remark3,
             rowversion = newrec_.rowversion
         WHERE sequ_id = newrec_.sequ_id
		   AND company = newrec_.company  
		   AND custid = newrec_.custid;
   ELSE
      UPDATE c_ifs_ht_customer_tab
         SET sequ_id = newrec_.sequ_id,
			 company = newrec_.company,
		     custid = newrec_.custid,
			 code = newrec_.code,		
			 modify_user = newrec_.modify_user,							
			 modify_time = newrec_.modify_time,							
			 modify_flg = newrec_.modify_flg,							
             remark1 = newrec_.remark1,
             remark2 = newrec_.remark2,
             remark3 = newrec_.remark3,
             rowversion = newrec_.rowversion
         WHERE &OBJID = objid_;
   END IF;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Update___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR DELETE -----------------
-----------------------------------------------------------------------------
-- Check_Delete___
--    Checks whether a specific LU-record may be removed or not.
--    The procedure should check business rules like attribute values
--    as well as database constraints (defined or not).
--
-- Delete___
--    Deletion of the specific LU-object from the database.
-----------------------------------------------------------------------------

PROCEDURE Check_Delete___ (
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.sequ_id || '^' ||remrec_.company || '^' || remrec_.custid || '^' ;
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.sequ_id || '^' ||remrec_.company || '^' || remrec_.custid || '^' ;
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   DELETE
      FROM  &TABLE
      WHERE &OBJID = objid_;
END Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
-- Lock__
--    Client-support to lock a specific instance of the logical unit.
--
-- New__
--    Client-support interface to create LU instances.
--       action_ = 'PREPARE'
--          Default values and handle of information to client.
--          The default values are set in procedure Prepare_Insert___.
--       action_ = 'CHECK'
--          Check all attributes before creating new object and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___.
--       action_ = 'DO'
--          Creation of new instances of the logical unit and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___
--          before calling procedure Insert___.
--
-- Modify__
--    Client-support interface to modify attributes for LU instances.
--       action_ = 'CHECK'
--          Check all attributes before modifying an existing object and
--          handle of information to client. The attribute list is unpacked,
--          checked and prepared(defaults) in procedure Unpack_Check_Update___.
--       action_ = 'DO'
--          Modification of an existing instance of the logical unit. The
--          procedure unpacks the attributes, checks all values before
--          procedure Update___ is called.
--
-- Remove__
--    Client-support interface to remove LU instances.
--       action_ = 'CHECK'
--          Check whether a specific LU-instance may be removed or not.
--          The procedure fetches the complete record by calling procedure
--          Get_Object_By_Id___. Then the check is made by calling procedure
--          Check_Delete___.
--       action_ = 'DO'
--          Remove an existing instance of the logical unit. The procedure
--          fetches the complete LU-record, checks for a delete and then
--          deletes the record by calling procedure Delete___.
-----------------------------------------------------------------------------

PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Lock__');
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack_Check_Insert___(attr_, newrec_);
   ELSIF (action_ = 'DO') THEN
      Unpack_Check_Insert___(attr_, newrec_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_ C_IFS_HT_CUSTOMER_TAB%ROWTYPE;
   newrec_ C_IFS_HT_CUSTOMER_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, 'C_IFS_HT_CUSTOMER_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      newrec_ := Get_Object_By_Id___(objid_);
      Unpack_Check_Update___(attr_, newrec_, objid_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
--CHS 180921 S-2018-066-CKC WU MODIFY START
      Client_SYS.Add_To_Attr('MODIFY_USER',Fnd_Session_API.Get_Fnd_User , attr_);
      Client_SYS.Add_To_Attr('MODIFY_TIME',SYSDATE , attr_);
      Client_SYS.Add_To_Attr('MODIFY_FLG','1' , attr_);
--CHS 180921 S-2018-066-CKC WU MODIFY END
      Unpack_Check_Update___(attr_, newrec_, objid_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;

-----------------------------------------------------------------------------
-------------------- PUBLIC BASE METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
-----------------------------------------------------------------------------

PROCEDURE Exist (
   sequ_id_  IN NUMBER,
   company_  IN VARCHAR2,
   custid_   IN VARCHAR2)
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Exist', TRUE);
   IF (NOT Check_Exist____(sequ_id_, company_, custid_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   END IF;
END Exist;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
--Project Name:CKC HT Replace                                              --
--Explain     :Get data                                                    --
--Create User :jliu                                                        --
--Create Date :2018-10-10                                                  --
-----------------------------------------------------------------------------
PROCEDURE Get_Detail_Data(  company_   in VARCHAR2, 
                            custid_    in VARCHAR2, 
                            content_   in VARCHAR2,
                            return_    out VARCHAR2) 
IS 
 code_          VARCHAR2(16);
 custname_      VARCHAR2(100);
 brevity_code_  VARCHAR2(6);
 tax_numner_    VARCHAR2(20);
 address_phone_ VARCHAR2(200);
 bank_account_  VARCHAR2(200);

 CURSOR get_detail_data IS
    SELECT 
           f.CODE,
           j.CUSTNAME,
           j.BREVITY_CODE,
           j.TAX_NUMNER,
           j.ADDRESS_PHONE,
           j.BANK_ACCOUNT
      FROM C_IFS_HT_CUSTOMER f, C_IFS_HT_CUSTOMER_TAX j
     WHERE f.custid = custid_  
        AND f.company = company_
        AND j.company = f.company 
	AND j.code = f.code;
BEGIN
    OPEN get_detail_data;
    FETCH get_detail_data INTO code_,custname_,brevity_code_,tax_numner_,address_phone_,bank_account_;
    CLOSE get_detail_data;

    return_:= CASE content_
            WHEN 'COMPANY' THEN company_
            WHEN 'CODE' THEN code_
            WHEN 'CUSTID' THEN custid_
            WHEN 'CUSTNAME' THEN custname_
	    WHEN 'BREVITY_CODE' THEN brevity_code_
            WHEN 'TAX_NUMNER' THEN tax_numner_
            WHEN 'ADDRESS_PHONE' THEN address_phone_
            WHEN 'BANK_ACCOUNT' THEN bank_account_
            END ;

END Get_Detail_Data;

-----------------------------------------------------------------------------
--Project Name:CKC HT Replace                                              --
--Explain     :Get data                                                    --
--Create User :jliu                                                        --
--Create Date :2018-10-10                                                  --
-----------------------------------------------------------------------------
FUNCTION Get_Detail_Data(  company_   in VARCHAR2, 
                            custid_    in VARCHAR2, 
                            content_   in VARCHAR2 ) RETURN VARCHAR2
IS 
 code_          VARCHAR2(16);
 custname_      VARCHAR2(100);
 brevity_code_  VARCHAR2(6);
 tax_numner_    VARCHAR2(20);
 address_phone_ VARCHAR2(200);
 bank_account_  VARCHAR2(200);
 return_        VARCHAR2(200);

 CURSOR get_detail_data IS
    SELECT 
           f.CODE,
           j.CUSTNAME,
           j.BREVITY_CODE,
           j.TAX_NUMNER,
           j.ADDRESS_PHONE,
           j.BANK_ACCOUNT
      FROM C_IFS_HT_CUSTOMER f, C_IFS_HT_CUSTOMER_TAX j
     WHERE f.custid = custid_  
        AND f.company = company_
        AND j.company = f.company 
	AND j.code = f.code;
BEGIN
    OPEN get_detail_data;
    FETCH get_detail_data INTO code_,custname_,brevity_code_,tax_numner_,address_phone_,bank_account_;
    CLOSE get_detail_data;

    return_:= CASE content_
            WHEN 'COMPANY' THEN company_
            WHEN 'CODE' THEN code_
            WHEN 'CUSTID' THEN custid_
            WHEN 'CUSTNAME' THEN custname_
	    WHEN 'BREVITY_CODE' THEN brevity_code_
            WHEN 'TAX_NUMNER' THEN tax_numner_
            WHEN 'ADDRESS_PHONE' THEN address_phone_
            WHEN 'BANK_ACCOUNT' THEN bank_account_
            END ;
RETURN return_ ;
END Get_Detail_Data;

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;




END &PKG;
/
SHOW ERROR


UNDEFINE MODULE
UNDEFINE LU
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE PKG
UNDEFINE OBJID
UNDEFINE OBJVERSION111223123123131233123123
-----------------------------------------------------------------------------
